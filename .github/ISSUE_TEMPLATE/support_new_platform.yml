name: Supporting a new platform
description: Proposal to build support for a platform that `django-simple-deploy` does not currently support.
title: "[New platform support]: "
labels: "feature request"

body:
  - type: markdown
    attributes:
      value: |
        Thank you for trying to make it easier to deploy Django projects. :)

  - type: input
    attributes:
      label: Platform
      description: What platform are you proposing we build support for?

  - type: textarea
    attributes:
      label: Your connection
      description: What is your connection with this platform?

  - type: markdown
    attributes:
      value: |
        Platforms that are a good fit for `django-simple-deploy` support have a mostly scriptable deployment process. If there's much work that needs to be done on a web portal, for example, the platform may not be a good fit for `django-simple-deploy`. However, I can see situations where `simple_deploy` is good for automating configuration, regardless of what other steps are necessary to complete the deployment.

  - type: textarea
    attributes:
      label: Rationale
      description: Briefly, why do you think this would be a good platform for `django-simple-deploy` to support?

  - type: markdown
    attributes:
      value: |
        Most platforms ask users to make some decisions during the initial deployment process: which resources will be created, what size will those resources be, etc. Can you make, and justify, good default decisions for users? (We can consider adding some [CLI args](https://django-simple-deploy.readthedocs.io/en/latest/general_documentation/cli_reference/) that allow users to customize configuration, but if we're exposing too much of a platform's CLI then we might not be simplifying the process enough.)

  - type: textarea
    attributes:
      label: CLI arguments
      description: Will supporting this platform require the introduction of any new CLI arguments? If so, what are they, and why are they necessary?


  - type: markdown
    attributes:
      value: |
        Every platform has a Quick Start guide; here's the guide for [deployment to Fly.io](https://django-simple-deploy.readthedocs.io/en/latest/quick_starts/quick_start_flyio/). You don't have to write the Quick Start guide for this platform right now, but you should be clear about what it would look like.

  - type: textarea
    attributes:
      label: "Quick Start: Configuration-only deployment"
      description: What would the configuration-only deployment process look like for this platform? Please write this as a bulleted list, or as a series of commands like you see in the Fly.io Quick Start guide. Please mention any prerequisites for deployment to this platform as well. (In the configuration mode, you may have to create some resources on the user's behalf in order to carry out the configuration. The goal is to *only* create resources that we can't easily ask the user to create before running `simple_deploy`.)

  - type: textarea
    attributes:
      label: Technical notes
      description: Briefly describe the changes that `simple_deploy --platform PLATFORM_NAME` would make to the user's project. What new files would be added to their project? What modifications to existing files would be made, such as settings.py? Can you point to an example of these files and changes?

  - type: textarea
    attributes:
      label: Authentication issues
      description: Authentication for all currently supported platforms happens through the CLI. We don't need to handle authentication at all; if users are not currently logged in, the platform's CLI prompts for a login in a way that doesn't interrupt the configuration or deployment process. Do you foresee any issues with authentication for this platform? If so, what are they, and how would we handle them?

  - type: textarea
    attributes:
      label: Implementing support for `--automate-all`
      description: All currently supported platforms support the `--automate-all` flag, although this is not a requirement. Is it possible to support an automated deployment process for this platform? If not, what steps block full automation?

  - type: markdown
    attributes:
      value: |
        The goal of `simple_deploy` is to simplify the initial configuration and deployment process. We want to simplify the path to a working initial deployment, but also help users start to build an understanding of the platform they've chosen, so they can maintain their deployment. For example, the final output message for a successful configuration informs users (briefly) how they can push subsequent changes to their project. We are also going to write a friendly log file that summarizes the configuration that was done, tells people how to push their next set of changes, and provides links to the most important parts of their platform's documentation.
  
  - type: textarea
    attributes:
      label: Followup support
      description: How easily can you describe the next steps for maintaining the deployment? What are the steps to push subsequent changes to the project?

  - type: textarea
    attributes:
      label: Ongoing maintenance
      description: Who do you imagine will take care of ongoing maintenance for supporting this platform? Is there anyone who works for this platform that we can contact for advice on building and maintaining an appropriate configuration and deployment process for this platform in the long term?

  - type: markdown
    attributes:
      value: "## Technical notes"

  - type: markdown
    attributes:
      value: |
        Since there isn't formal documentation about building out support for a new platform yet, here's a brief description of what it would take:

        - Implementing support
            - Add a new directory to `simple_deploy/management/commands/`. The name of this directory should be the same name you want people to use in the command `manage.py simple_deploy --platform PLATFORM_NAME`.
            - Add your platform arg to `_validate_platform_arg()` in `simple_deploy.py`. This should be the only change necessary to `simple_deploy.py`.
            - In `cli.py`, add your platform arg as an option for the `--platform` argument. This is informational; validation happens in `simple_deploy.py`.
            - Write a `deploy.py` script. Using the script from the `fly_io/` folder is probably a good approach at this point.
            - Write a `deploy_messages.py` file for any platform-specific output messages you'll need.
            - Include a `templates/` directory in your platform's folder for any new files that will need to be created, or any sections that need to be added to existing files.
        - Unit Testing
            - Add a new folder in `unit_tests/platforms/` for your platform.
            - Make a `reference_files/` directory, and add any test files you need here.
            - Write a new file for your platform, called `test_PLATFORMNAME_config.py`. It should test that the sample project is configured correctly when run against your platform. Again, use `test_flyio_config.py` as a template.
        - Integration Testing
            - Add a new file to `integration_tests/` called `test_PLATFORMNAME_deployment.sh`. Running `./integration_tests/test_deploy_process.sh -p PLATFORM_NAME` should carry out a full deployment which pops up in a new browser tab, and runs the functionality tests for the sample project.
        - Documentation
            - Add a Quick Start page for your platform.
            - Add this platform to the home page.
            - Add an entry about this platform on the Choosing a Platform page.

        For more information, see [General Approach to Supporting Platforms](https://github.com/ehmatthes/django-simple-deploy/blob/main/old_docs/supporting_platforms.md). This is in `old_docs/`, so it may be somewhat out of date, but it should still be helpful. It will be fully updated and moved to the official documentation at some point before the 1.0 release.

  - type: markdown
    attributes:
      value: "## Thank you"

  - type: markdown
    attributes:
      value: |
        Again, thank you for expressing interest in simplifying the deployment process for Django developers. This automated approach can help everyone, from beginners to seasoned Django experts.